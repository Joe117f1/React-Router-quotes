{"version":3,"sources":["components/quotes/HighlightedQuote.module.css","components/comments/NewCommentForm.module.css","components/comments/CommentItem.module.css","components/comments/CommentsList.module.css","components/comments/Comments.module.css","components/quotes/HighlightedQuote.js","components/comments/NewCommentForm.js","components/comments/CommentItem.js","components/comments/CommentsList.js","components/comments/Comments.js","pages/QuoteDetail.js"],"names":["module","exports","HighlightedQuote","props","className","classes","quote","text","author","NewCommentForm","commentTextRef","useRef","useHttp","addComment","sendRequest","status","error","onAddComment","useEffect","current","value","submitFormHandler","event","preventDefault","enteredComment","commentData","quoteId","form","onSubmit","LoadingSpinner","control","htmlFor","id","rows","ref","actions","CommentItem","item","CommentsList","comments","map","comment","Comments","useState","isAddingComment","setIsAddingComment","useParams","getAllComments","loadedComments","data","commentsToDisplay","addedCommentHandler","useCallback","length","onClick","QuoteDetail","match","useRouteMatch","getSingleQuote","loadedQuotes","path","exact","to","url"],"mappings":"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","file":"static/js/3.51cb2ec5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"quote\":\"HighlightedQuote_quote__27_9J\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"NewCommentForm_form__3tojh\",\"loading\":\"NewCommentForm_loading__3XaOf\",\"control\":\"NewCommentForm_control__3uVgH\",\"actions\":\"NewCommentForm_actions__2b-Hr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"CommentItem_item__3nRSs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"CommentsList_comments__1Wv1i\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"Comments_comments__1WPDt\"};","import classes from './HighlightedQuote.module.css';\n\nconst HighlightedQuote = (props) => {\n  return (\n    <figure className={classes.quote}>\n      <p>{props.text}</p>\n      <figcaption>{props.author}</figcaption>\n    </figure>\n  );\n};\n\nexport default HighlightedQuote;\n","import { useRef, useEffect } from 'react';\n\nimport useHttp from '../../hooks/use-http';\nimport { addComment } from '../../lib/api';\nimport LoadingSpinner from '../UI/LoadingSpinner';\nimport classes from './NewCommentForm.module.css';\n\nconst NewCommentForm = (props) => {\n  const commentTextRef = useRef();\n\n  const { sendRequest, status, error } = useHttp(addComment);\n\n  const { onAddComment } = props;\n\n  useEffect(() => {\n    if (status === 'completed' && !error)\n      onAddComment();\n      commentTextRef.current.value = '';\n  },\n    [status, error, onAddComment])\n\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n    const enteredComment = commentTextRef.current.value;\n\n    // optional: Could validate here\n\n    sendRequest({\n      commentData: { text: enteredComment },\n      quoteId: props.quoteId\n    });\n  };\n\n  return (\n    <form className={classes.form} onSubmit={submitFormHandler}>\n      {status === 'pending' &&\n        <div className='centered'>\n          <LoadingSpinner />\n        </div>\n      }\n      <div className={classes.control} onSubmit={submitFormHandler}>\n        <label htmlFor='comment'>Your Comment</label>\n        <textarea id='comment' rows='5' ref={commentTextRef}></textarea>\n      </div>\n      <div className={classes.actions}>\n        <button className='btn'>Add Comment</button>\n      </div>\n    </form>\n  );\n};\n\nexport default NewCommentForm;\n","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","import CommentItem from './CommentItem';\nimport classes from './CommentsList.module.css';\n\nconst CommentsList = (props) => {\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","import { useState, useEffect, useCallback } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport NewCommentForm from './NewCommentForm';\nimport LoadingSpinner from '../UI/LoadingSpinner';\nimport CommentsList from './CommentsList';\nimport useHttp from '../../hooks/use-http';\nimport { getAllComments } from '../../lib/api';\nimport classes from './Comments.module.css';\n\nconst Comments = () => {\n  const [isAddingComment, setIsAddingComment] = useState(false);\n  const params = useParams();\n  const { quoteId } = params;\n\n  const { sendRequest, status, data: loadedComments, error } = useHttp(getAllComments);\n\n  useEffect(() => {\n    sendRequest(quoteId);\n  },\n    [sendRequest, quoteId]);\n\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n\n  const addedCommentHandler = useCallback(() => {\n    sendRequest(quoteId);\n  }, [sendRequest, quoteId]);\n\n  let commentsToDisplay;\n\n  if (status === 'pending') {\n    commentsToDisplay = <div className='centered'>\n      <LoadingSpinner />\n    </div>\n  };\n\n  if (status === 'completed' && (loadedComments && loadedComments.length > 0)) {\n    commentsToDisplay = <CommentsList comments={loadedComments} />\n  };\n\n  if (status === 'completed' && (!loadedComments || loadedComments.length === 0)) {\n    commentsToDisplay = <p className='centered'>No comments were added yet</p>\n  };\n\n  if (status === 'error') {\n    commentsToDisplay = <div className='centered'>\n      {error}\n    </div>\n  };\n\n  return (\n    <section className={classes.comments}>\n      <h2>User Comments</h2>\n      {!isAddingComment && (\n        <button className='btn' onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      )}\n      {isAddingComment && <NewCommentForm\n        quoteId={quoteId}\n        onAddComment={addedCommentHandler} />}\n      {commentsToDisplay}\n    </section>\n  );\n};\n\nexport default Comments;\n","import { Fragment, useEffect } from 'react';\r\nimport { Link, useParams, Route, useRouteMatch } from 'react-router-dom';\r\n\r\nimport HighlightedQuote from '../components/quotes/HighlightedQuote';\r\nimport Comments from '../components/comments/Comments';\r\nimport LoadingSpinner from '../components/UI/LoadingSpinner';\r\nimport useHttp from '../hooks/use-http';\r\nimport { getSingleQuote } from '../lib/api';\r\n\r\nconst QuoteDetail = () => {\r\n    const match = useRouteMatch();\r\n    const params = useParams();\r\n    const { quoteId } = params;\r\n\r\n    const { sendRequest, status, data: loadedQuotes, error } = useHttp(getSingleQuote, true);\r\n\r\n    useEffect(() => {\r\n        sendRequest(quoteId);\r\n    },\r\n        [sendRequest, quoteId]);\r\n\r\n    if (status === 'pending') {\r\n        return (\r\n            <div className='centered'>\r\n                <LoadingSpinner />\r\n            </div>\r\n        );\r\n    };\r\n\r\n    if (status === 'error') {\r\n        return <p className='centered focused'>{error}</p>;\r\n    };\r\n\r\n    if (!loadedQuotes.text) {\r\n        return <HighlightedQuote text='No quote found' author='' />\r\n    };\r\n\r\n    return (\r\n        <Fragment>\r\n            <HighlightedQuote text={loadedQuotes.text} author={loadedQuotes.author} />\r\n            <Route path={match.path} exact>\r\n                <div className='centered'>\r\n                    <Link className='btn--flat' to={`${match.url}/comments`}>\r\n                        Load comments\r\n                    </Link>\r\n                </div>\r\n            </Route>\r\n            <Route path={`${match.path}/comments`}>\r\n                <Comments />\r\n            </Route>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default QuoteDetail;"],"sourceRoot":""}