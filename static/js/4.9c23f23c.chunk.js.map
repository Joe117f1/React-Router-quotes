{"version":3,"sources":["components/UI/Card.module.css","components/quotes/QuoteForm.module.css","components/UI/Card.js","components/quotes/QuoteForm.js","pages/NewQuote.js"],"names":["module","exports","Card","props","className","classes","card","children","QuoteForm","authorInputRef","useRef","textInputRef","useState","isEntering","setIsEntering","hasError","setHasError","validateInput","input","trim","when","message","onFocus","form","onSubmit","event","preventDefault","enteredAuthor","current","value","enteredText","isAuthorValid","isTextValid","onAddQuote","author","text","isLoading","loading","LoadingSpinner","control","htmlFor","type","id","ref","rows","actions","onClick","NewQuote","history","useHistory","useHttp","addQuote","sendRequest","status","useEffect","push","quoteData"],"mappings":"oHACAA,EAAOC,QAAU,CAAC,KAAO,qB,mBCAzBD,EAAOC,QAAU,CAAC,KAAO,wBAAwB,QAAU,2BAA2B,QAAU,2BAA2B,QAAU,6B,yFCKtHC,EAJF,SAACC,GACZ,OAAO,qBAAKC,UAAWC,IAAQC,KAAxB,SAA+BH,EAAMI,Y,yBCiE/BC,EA7DG,SAACL,GACjB,IAAMM,EAAiBC,mBACjBC,EAAeD,mBACrB,EAAoCE,oBAAS,GAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAgCF,oBAAS,GAAzC,mBAAOG,EAAP,KAAiBC,EAAjB,KAEMC,EAAgB,SAACC,GAAD,MAA4B,KAAjBA,EAAMC,QAwBvC,OACE,eAAC,WAAD,WACE,cAAC,IAAD,CAAQC,KAAMP,EAAYQ,QAAS,iBACjC,2EACF,cAAC,EAAD,UACE,uBAAMC,QAba,WACvBR,GAAc,IAaRV,UAAWC,IAAQkB,KAAMC,SA5BP,SAACC,GACzBA,EAAMC,iBACN,IAAMC,EAAgBlB,EAAemB,QAAQC,MACvCC,EAAcnB,EAAaiB,QAAQC,MACnCE,EAAgBd,EAAcU,GAC9BK,EAAcf,EAAca,GAE9BC,GAAiBC,EACnB7B,EAAM8B,WAAW,CAAEC,OAAQP,EAAeQ,KAAML,IAEhDd,GAAY,IAiBV,UAEGb,EAAMiC,WACL,qBAAKhC,UAAWC,IAAQgC,QAAxB,SACE,cAACC,EAAA,EAAD,MAIJ,sBAAKlC,UAAWC,IAAQkC,QAAxB,UACE,uBAAOC,QAAQ,SAAf,oBACA,uBAAOC,KAAK,OAAOC,GAAG,SAASC,IAAKlC,OAEtC,sBAAKL,UAAWC,IAAQkC,QAAxB,UACE,uBAAOC,QAAQ,OAAf,kBACA,0BAAUE,GAAG,OAAOE,KAAK,IAAID,IAAKhC,OAEnCI,GAAY,wDACb,qBAAKX,UAAWC,IAAQwC,QAAxB,SACE,wBAAQC,QA3BY,WAC5BhC,GAAc,IA0BkCV,UAAU,MAAlD,kC,gBCnCG2C,UAlBE,WACb,IAAMC,EAAUC,cAChB,EAAgCC,YAAQC,KAAhCC,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,OAErBC,qBAAU,WACS,cAAXD,GACAL,EAAQO,KAAK,aAGjB,CAACF,EAAQL,IAMb,OAAO,cAAC,EAAD,CAAWZ,UAAsB,YAAXiB,EAAsBpB,WAJ3B,SAACuB,GACrBJ,EAAYI","file":"static/js/4.9c23f23c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Card_card__1z1R_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"QuoteForm_form__2tsS3\",\"loading\":\"QuoteForm_loading__2mxxu\",\"control\":\"QuoteForm_control__3JKv1\",\"actions\":\"QuoteForm_actions__3UGbx\"};","import classes from './Card.module.css';\n\nconst Card = (props) => {\n  return <div className={classes.card}>{props.children}</div>;\n};\n\nexport default Card;\n","import { useRef, useState, Fragment } from 'react';\nimport { Prompt } from 'react-router-dom';\n\nimport Card from '../UI/Card';\nimport LoadingSpinner from '../UI/LoadingSpinner';\nimport classes from './QuoteForm.module.css';\n\nconst QuoteForm = (props) => {\n  const authorInputRef = useRef();\n  const textInputRef = useRef();\n  const [isEntering, setIsEntering] = useState(false);\n  const [hasError, setHasError] = useState(false);\n\n  const validateInput = (input) => input.trim() !== '';\n\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n    const enteredAuthor = authorInputRef.current.value;\n    const enteredText = textInputRef.current.value;\n    const isAuthorValid = validateInput(enteredAuthor);\n    const isTextValid = validateInput(enteredText);\n\n    if (isAuthorValid && isTextValid) {\n      props.onAddQuote({ author: enteredAuthor, text: enteredText });\n    } else {\n      setHasError(true);\n    };\n  };\n\n  const formFocusHandler = () => {\n    setIsEntering(true);\n  };\n\n  const finishEnteringHandler = () => {\n    setIsEntering(false);\n  };\n\n  return (\n    <Fragment>\n      <Prompt when={isEntering} message={() =>\n        'Are you sure you want to leave this page? all your work will be lost.'} />\n      <Card>\n        <form onFocus={formFocusHandler}\n          className={classes.form} onSubmit={submitFormHandler}>\n          {props.isLoading && (\n            <div className={classes.loading}>\n              <LoadingSpinner />\n            </div>\n          )}\n\n          <div className={classes.control}>\n            <label htmlFor='author'>Author</label>\n            <input type='text' id='author' ref={authorInputRef} />\n          </div>\n          <div className={classes.control}>\n            <label htmlFor='text'>Text</label>\n            <textarea id='text' rows='5' ref={textInputRef} ></textarea>\n          </div>\n          {hasError && <p>Please fill both fields</p>}\n          <div className={classes.actions}>\n            <button onClick={finishEnteringHandler} className='btn'>Add Quote</button>\n          </div>\n        </form>\n      </Card>\n    </Fragment>\n  );\n};\n\nexport default QuoteForm;\n","import { useEffect } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nimport QuoteForm from '../components/quotes/QuoteForm';\r\nimport useHttp from '../hooks/use-http';\r\nimport { addQuote } from '../lib/api';\r\n\r\nconst NewQuote = () => {\r\n    const history = useHistory();\r\n    const { sendRequest, status } = useHttp(addQuote);\r\n\r\n    useEffect(() => {\r\n        if (status === 'completed') {\r\n            history.push('/quotes');\r\n        };\r\n    },\r\n        [status, history]);\r\n\r\n    const addQuoteHandler = (quoteData) => {\r\n        sendRequest(quoteData);\r\n    };\r\n\r\n    return <QuoteForm isLoading={status === 'pending'} onAddQuote={addQuoteHandler} />\r\n};\r\n\r\nexport default NewQuote;"],"sourceRoot":""}